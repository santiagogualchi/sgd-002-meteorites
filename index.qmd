---
title: Meteorite Landings
author: Santiago Gualchi
format:
  html:
    df-print: kable
    fig-width: 6
    fig-height: 6
execute: 
  warning: false
---

## Introduction

## Packages

```{r}
library(dplyr)
library(forcats)
library(ggplot2)
library(ggtext)
library(readr)
library(stringr)
library(tibble)
```

## Palette

Here I define the colors that will be used throughout the slides:

```{r}
color_bg <- "#ffffff"
color_grey_1 <- "#e3e3e3"
color_grey_2 <- "#a1a1a1"
color_grey_3 <- "#6d6d6d"
color_grey_4 <- "#444444"
color_accent_light <- "#62beff"
color_accent_dark <- "#0077cc"
```

## Themes

Here I define the themes for the ggplots.

### Cover theme

```{r}
theme_cover <- theme_void() +
  theme(
    plot.background = element_rect(
      fill = color_accent_light,
      color = "transparent"
    )
  )
```

### Default theme

```{r}
default_theme <- theme_minimal() +
  theme(
    text = element_text(
      color = color_grey_3,
      size = unit(14, "pt")
    ),
    axis.text.x = element_text(
      size = unit(10, "pt"),
      color = color_grey_3
    ),
    panel.grid = element_blank(),
    plot.background = element_rect(
      fill = color_bg,
      color = "transparent"
    ),
    plot.title = element_text(
      face = "bold",
      color = color_grey_4,
      size = unit(18, "pt")
    ),
    plot.title.position = "plot",
    plot.margin = margin(.04, .04, .04, .04, "npc")
  )
```

### Add X line to theme

```{r}
x_line_theme <- 
  theme(
    axis.ticks.x = element_line(
      color = color_grey_1
    ),
    axis.line.x = element_line(
      color = color_grey_1
    )
  )
```

## Data

We'll use the web-scraped data if available, or the alternative data otherwise:

```{r}
file_path <- if (file.exists("nogit/tidy-data.csv")) {
  "nogit/tidy-data.csv"
} else {
  "data/meteorite-landings/meteorite-landings.csv"
}

data_raw <- read_csv(
  file_path,
  na = "",
  col_types = cols_only(
    name = col_character(),
    nametype = col_factor(),
    # recclass = col_factor(),
    mass = col_double(),
    fall = col_factor(),
    year = col_integer(),
    reclat = col_double(),
    reclong = col_double(),
    place = col_character()
  )
) |> 
  # This mutates are performed to transform the alternative data into a format
  # compatible with the web-scraped data:
  mutate(
    nametype = fct_recode(nametype, Official = "Valid"),
    fall = fct_recode(fall, Fall = "Fell", Find = "Found")
  ) |> 
  # This left_join is performed in order to ensure that there's a place column
  # in the alternative data.
  left_join(
    tibble(name = "INEXISTENT-NAME-SANTIGUALCHI.DATA", place = ""),
    by = "name",
    # We include the suffixes because, for the web-scraped data, there'll be
    # two place columns. This way, we preserve the original place column name
    # and distinguish the dummy column with the suffix "_drop".
    suffix = c("", "_drop")
  ) |> 
  # Now we can drop the dummy column if present.
  select(-ends_with("_drop"))

head(data_raw, 10)
```

Now we'll do some tidying:

```{r}
data_tidy <- data_raw |> 
  # Rename to have more descriptive names.
  rename(
    # class = recclass,
    latitude = reclat,
    longitude = reclong
  ) |> 
  # Remove data-points of on-going year.
  filter(year < max(year, na.rm = TRUE)) |> 
  # Keep only meteorites (other nametypes are not meteorites).
  filter(nametype %in% c("Official", "Provisional")) |> 
  mutate(
    # Remove meaningless trailing characters from names.
    name = str_replace(name, r"{\s*\*\*$}", ""),
    # Remove meteorites on null island.
    latitude = if_else(latitude == 0 & longitude == 0, NA_real_, latitude),
    longitude = if_else(latitude == 0 & longitude == 0, NA_real_, longitude)
  )

head(data_tidy, 10)
```

Get counts by year:

```{r}
data_counts_by_year <- data_tidy |> 
  group_by(year) |> 
  summarize(n = n())

head(data_counts_by_year, 10)
```


## Cover

This will be the cover of the instagram post. I'll use `{ggplot2}` to create it,
to have a consistent format across all slides:

```{r}
ggplot(tibble(0)) +
  geom_textbox(
    label = "Meteorites:<br>Landings<br>And Discoveries",
    x = 0,
    y = 0,
    width = unit(5, "inch"),
    size = 14,
    fontface = "bold",
    color = NA,
    text.color = color_bg,
    fill = NA,
    lineheight = 1.3,
    halign = 1,
    hjust = .5,
    vjust = .5
  ) + 
  scale_x_continuous(limits = c(-9, 9)) +
  scale_y_continuous(limits = c(-9, 9)) +
  theme_cover
```


## Discoveries per year

This plot will have the number of meteorites found by year:

```{r}
data_counts_by_year_since_1800 <- data_counts_by_year |> 
  filter(year >= 1800)

milestones <- tribble(
  ~year, ~milestone,
  1803,  "Recognition of meteorites<br>as extraterrestrial",
  1957,  "Beginning of<br>the Space Age",
  2023,  "Present day"
)

ggplot(
  data_counts_by_year_since_1800,
  mapping = aes(
    x = year,
    y = n
  )
) +
  geom_vline(
    data = milestones,
    mapping = aes(
      xintercept = year
    ),
    linetype = "longdash",
    color = color_grey_1
  ) +
  geom_richtext(
    data = milestones,
    mapping = aes(
      x = year + 3,
      label = paste0(
        "<span style='font-size:12pt;'>**", year, "**</span><br>",
        "<span style='font-size:11pt;'>", milestone, "</span><br>"
      )
    ),
    y = max(data_counts_by_year_since_1800$n) + 1800,
    color = color_grey_3,
    fill = "transparent",
    label.color = "transparent",
    hjust = 0,
    vjust = 1,
    label.padding = unit(0, "pt")
  ) +
  geom_col(
    fill = color_accent_light,
    # This overlaps, but I want the bars to be more visible.
    width = 2
  ) +
  scale_x_continuous(
    limits = c(1800, 2050),
    breaks = seq(1800, 2050, by = 50),
    expand = expansion(mult = c(.05, .075))
  ) +
  scale_y_continuous(
    breaks = NULL,
    expand = expansion(mult = 0, add = c(0, 2000))
  ) +
  labs(
    title = "Most Meteorites Were Found Very Recently",
    subtitle = "Almost all discoveries happened after the Space Age began",
    x = NULL,
    y = NULL
  ) +
  default_theme +
  x_line_theme
```

